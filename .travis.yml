sudo: false

matrix:
  include:
    - env: CABALVER=1.22 GHCVER=7.10.2
      addons:
        apt:
          sources:
            - hvr-ghc
          packages:
            - cabal-install-1.22
            - ghc-7.10.2

    - env: CABALVER=head GHCVER=head
      addons:
        apt:
          sources:
            - hvr-ghc
          packages:
            - cabal-install-head
            - ghc-head

  allow_failures:
    - env: CABALVER=head GHCVER=head

# Note: the distinction between `before_install` and `install` is not important.
before_install:
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH


install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update
 - cabal install --only-dependencies --enable-tests --enable-benchmarks

# Here starts the actual work to be performed for the package under test; any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - cabal configure --enable-optimization=2 --enable-tests --enable-benchmarks -fasserts -v2
 - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cabal configure --enable-optimization=2 --enable-tests --enable-benchmarks -fasserts -v2
 - cabal test
# See https://github.com/haskell/cabal/issues/1764
# - cabal check
 - cabal sdist   # tests that a source-distribution can be generated

# The following scriptlet checks that the resulting source distribution can be built & installed
 - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
   cd dist/;
   if [ -f "$SRC_TGZ" ]; then
      cabal install --force-reinstalls "$SRC_TGZ";
   else
      echo "expected '$SRC_TGZ' not found";
      exit 1;
   fi
